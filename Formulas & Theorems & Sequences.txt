Number of spanning trees with N nodes = N^(N-2)

Number of spanning trees in complete bipartite graph G(x,y) = x^(y-1) * y^(x-1)

For two coprime positive integers m and n, that largest number that cannot be written as 
am + bn (cannot be made by adding up m and n) will be m*n — m — n.

For any pair of positive integers n and k, the number of k-tuples of positive integers whose sum is n is equal to 
the number of (k − 1)-element subsets of a set with n − 1 elements. Choose(n-1,k-1)

For any pair of positive integers n and k, the number of k-tuples of non-negative integers whose sum is n is equal to 
the number of multisets of cardinality k − 1 taken from a set of size n + 1. Choose(n+k-1,k-1)

ats = 0;
for(int k=0; k<=r; k++)
ats+=Choose(m,k)*Choose(n,r-k);
is same as ats = Choose(m+n,r)

ats = 0;
for(int i=r; i<=n; i++)
ats+=Choose(i,r);
is same as ats = Choose(n+1,r+1)

ats = 0;
for(int k=0; k<=n; k++)
ats+=Choose(n,k);
is same as ats = 2^n

ats = 0;
for(int m=0; m<=n; m++)
ats+=Choose(m,k);
is same as ats = Choose(n+1,k+1)

ats = 0;
for(int k=0; k<=m; k++)
ats+=Choose(n+k,k);
is same as ats = Choose(n+m+1,m)

ats = 0;
for(int k=0; k<=n; k++)
ats+=Choose(n,k)^2;
is same as ats = Choose(2*n,n)

ats = 0;
for(int k=0; k<=n; k++)
ats+=k*Choose(n,k);
is same as ats = n*2^(n-1)

"In an election where candidate A receives p votes and candidate B receives q votes with p > q, what is the probability
that A will be strictly ahead of B throughout the count?" The answer is (p-q)/(p+q)

Every even integer greater than 2 can be expressed as the sum of two primes.

In number theory, Wilson's theorem states that a natural number n > 1 is a prime number if and only if the product of all 
the positive integers less than n is one less than a multiple of n. So n is prime if and only if (n-1)! mod n = -1

Zeckendorf's theorem states that every positive integer can be represented uniquely as the sum of one or more distinct 
Fibonacci numbers in such a way that the sum does not include any two consecutive Fibonacci numbers.

A multiplicative functions is a function f(x) which satisfies f(a*b) = f(a)*f(b)
let d(n) - count of divisors of n
let σ(n) - sum of divisors of n
Both σ() and d() are multiplicative

Cos theorem: a*a = b*b + c*c - 2*b*c*cosAlpha

Dividing a circle into areas by means of an inscribed polygon with n sides in such a way as to maximise the number of areas created by the edges and diagonals, sometimes called Moser's circle problem, has a solution by an inductive method. The greatest possible number of regions, rG = choose( n, 4 ) + choose( n, 2) + 1, giving the sequence 1, 2, 4, 8, 16, 31, 57, 99, 163, 256

If we have repeating fraction like 0.abc where abc is repeating we can convert to normal fraction easilly: its just abc/999 or just all repeating_digits divided by #count_ofRepeatingDigits nines

if m > 0 && n > 0       a = m*m-n*n,   b = 2*m*n,    c = m*m + n*n     is a Pythagorean triple


Towers of hanoi:
1) Move m − 1 disks from the source to the spare peg
2) Move the disk m from the source to the target peg,
3) Move the m − 1 disks that we have just placed on the spare, from the spare to the target peg 

Negatvie number bases:
Same as positive with division by base, with one tweak: if remainder becomes negative, we gotta increase value by 1 and remainder by base

Monty Hall winning probability (always switching doors):
ats+=1.0*cows/(cows+cars) * (cars) / (cars+cows-1-open); //Case 1: we select a Cow door
ats+=1.0*cars/(cows+cars) * (cars-1) / (cars+cows-1-open); //Case 2: we select a Car door

Expected number of stickers to collect all N different stickers,when all 1...N stickershave same probability of appearing:
 for(int i=1; i<=n; i++)EX+=1.0*n/i;

 Eulers totient function (phi):
     for(int i=1; i<2000001; i++)phi[i]=i;
    for(int i=2; i<2000001; i++)if(phi[i]==i)
    for(int j=i; j<2000001; j+=i)phi[j]-=phi[j]/i;

Inversions in range:
inv[1] = 1; //Note m must be prime
for(int i = 2; i < m; ++i)inv[i] = (m - (m/i) * inv[m%i] % m) % m;


|-|-|-|-|-|-|-|-|-|-||-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||-|-|-|-|-|-|
Grundy numbers:
    To calculate the Grundy value of a given state you need to:
    1)  Get all possible transitions from this state
    2)  Each transition can lead to a sum of independent games.
        Calculate the Grundy value for each independent game and xor-sum them.
    3)  After we calculated Grundy values for each transition we find the state's value as the mex
        of these numbers.

    If the value is zero, then the current state is losing, otherwise it is winning.

In comparison to the previous section, we take into account the fact that there can be transitions
 to combined games. We consider them a Nim with pile sizes equal to the independent games' Grundy values.
 We can xor-sum them just like usual Nim according to Bouton's theorem.
|-|-|-|-|-|-|-|-|-|-||-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-||-|-|-|-|-|-|

N-Queens puzzle solution for N > 3  :
If the remainder from dividing n by 6 is not 2 or 3 then the list is simply all even numbers followed by all odd numbers not greater than N.
Otherwise, write separate lists of even and odd numbers (i. e. 2, 4, 6, 8 — 1, 3, 5, 7).
If the remainder is 2, swap 1 and 3 in odd list and move 5 to the end (i. e. 3, 1, 7, 5).
If the remainder is 3, move 2 to the end of even list and 1,3 to the end of odd list (i. e. 4, 6, 8, 2 — 5, 7, 1, 3).
Append odd list to the even list and place queens in the rows given by these numbers, from left to right (i. e. a2, b4, c6, d8, e3, f1, g7, h5).

Dearrangements: (permutations such that no element remain in its position)
D[0]=1;
for(int i=2; i<=n; i++)D[i]=(i-1)*(D[i-1] + D[i-2]);

//Number of ways to go from (x1,y1) to (x2,y2) only going up/down/diagonal
for(int d=0; d<=min(x2-x1,y2-y1); d++){
    int steps = x2-x1+y2-y1;
    ats = (ats + C(F,inv,x2-x1,d,M)%M * C(F,inv,steps-d,x2-x1,M)%M)%M;}

Random basics:
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());//theres also mt19937_64 for 64 bit random integers
int random_integer = uniform_int_distribution<int>(2, 10)(rng); //generates random ints in range [2,10]
shuffle(permutation.begin(), permutation.end(), rng); //random_shuffle

ordered set:
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
ordered_set S;
S.order_of_key(x)
*S.find_by_order(x-1)

custom set comparator:
struct comp
{bool operator() (const double& a, const double& b)const{return b - a > 1e-7;}};
set<double,comp>S;

